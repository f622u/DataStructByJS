/**
 * 完全平方数
 * @param {number} n
 * @return {number}
 */

/**
 * 解释：创建一个新的长度为n+1的数组，将所有元素赋值为零。
 * 使用循环遍历数组一次，将数组每个位置的值初始化为下标值--
 * 意味着这个数拆分成n个完全平方数相加时，n的最大值为i--
 * 例如：3=1+1+1，1为三个完全平方数，这次n的最大值为3即下标3。
 * 此时再内部写一个循环，当i大于某个自然数（j）的平方时，
 * 证明其可拆解为某两个平方数的和，取平方数个数最小值赋值给该位置，接着循环。
 * 执行用时：252ms，内存消耗：41.1MB
 * 时间复杂度：O(n^2)。嵌套循环。
 * 空间复杂度：O(n)。占用一个数组。
 */
var numSquares = function(n) {
  const res = [...Array(n+1)].map(item => item=0);
  for(let i = 1; i <= n; i++) {
      res[i] = i;
      for(let j = 1; i-j*j >=0; j++) {
         // res[i-j*j]+1 意为 假如 i=4，j=2，则 i-j*j=0，又res[0]=0，
         // 而要得到4至少需要一次平方(2^2=4)，所以 +1
         // 也即，要以平方来得到除0以外的一个自然数，至少需要一次平方
          res[i] = Math.min(res[i], res[i-j*j]+1);
      }
  }
  return res[n];
};